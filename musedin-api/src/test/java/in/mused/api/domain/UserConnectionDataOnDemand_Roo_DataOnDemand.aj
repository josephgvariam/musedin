// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mused.api.domain;

import in.mused.api.domain.UserConnection;
import in.mused.api.domain.UserConnectionDataOnDemand;
import in.mused.api.service.UserConnectionService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserConnectionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserConnectionDataOnDemand: @Component;
    
    private Random UserConnectionDataOnDemand.rnd = new SecureRandom();
    
    private List<UserConnection> UserConnectionDataOnDemand.data;
    
    @Autowired
    UserConnectionService UserConnectionDataOnDemand.userConnectionService;
    
    public UserConnection UserConnectionDataOnDemand.getNewTransientUserConnection(int index) {
        UserConnection obj = new UserConnection();
        setAccessToken(obj, index);
        setDisplayName(obj, index);
        setExpireTime(obj, index);
        setImageUrl(obj, index);
        setProfileUrl(obj, index);
        setProviderId(obj, index);
        setProviderUserId(obj, index);
        setRank(obj, index);
        setRefreshToken(obj, index);
        setSecret(obj, index);
        setUserId(obj, index);
        return obj;
    }
    
    public void UserConnectionDataOnDemand.setAccessToken(UserConnection obj, int index) {
        String accessToken = "accessToken_" + index;
        obj.setAccessToken(accessToken);
    }
    
    public void UserConnectionDataOnDemand.setDisplayName(UserConnection obj, int index) {
        String displayName = "displayName_" + index;
        obj.setDisplayName(displayName);
    }
    
    public void UserConnectionDataOnDemand.setExpireTime(UserConnection obj, int index) {
        Long expireTime = new Integer(index).longValue();
        obj.setExpireTime(expireTime);
    }
    
    public void UserConnectionDataOnDemand.setImageUrl(UserConnection obj, int index) {
        String imageUrl = "imageUrl_" + index;
        obj.setImageUrl(imageUrl);
    }
    
    public void UserConnectionDataOnDemand.setProfileUrl(UserConnection obj, int index) {
        String profileUrl = "profileUrl_" + index;
        obj.setProfileUrl(profileUrl);
    }
    
    public void UserConnectionDataOnDemand.setProviderId(UserConnection obj, int index) {
        String providerId = "providerId_" + index;
        obj.setProviderId(providerId);
    }
    
    public void UserConnectionDataOnDemand.setProviderUserId(UserConnection obj, int index) {
        String providerUserId = "providerUserId_" + index;
        obj.setProviderUserId(providerUserId);
    }
    
    public void UserConnectionDataOnDemand.setRank(UserConnection obj, int index) {
        int rank = index;
        if (rank < 1 || rank > 9999) {
            rank = 9999;
        }
        obj.setRank(rank);
    }
    
    public void UserConnectionDataOnDemand.setRefreshToken(UserConnection obj, int index) {
        String refreshToken = "refreshToken_" + index;
        obj.setRefreshToken(refreshToken);
    }
    
    public void UserConnectionDataOnDemand.setSecret(UserConnection obj, int index) {
        String secret = "secret_" + index;
        obj.setSecret(secret);
    }
    
    public void UserConnectionDataOnDemand.setUserId(UserConnection obj, int index) {
        String userId = "userId_" + index;
        obj.setUserId(userId);
    }
    
    public UserConnection UserConnectionDataOnDemand.getSpecificUserConnection(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        UserConnection obj = data.get(index);
        ObjectId id = obj.getId();
        return userConnectionService.findUserConnection(id);
    }
    
    public UserConnection UserConnectionDataOnDemand.getRandomUserConnection() {
        init();
        UserConnection obj = data.get(rnd.nextInt(data.size()));
        ObjectId id = obj.getId();
        return userConnectionService.findUserConnection(id);
    }
    
    public boolean UserConnectionDataOnDemand.modifyUserConnection(UserConnection obj) {
        return false;
    }
    
    public void UserConnectionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = userConnectionService.findUserConnectionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'UserConnection' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<UserConnection>();
        for (int i = 0; i < 10; i++) {
            UserConnection obj = getNewTransientUserConnection(i);
            try {
                userConnectionService.saveUserConnection(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
