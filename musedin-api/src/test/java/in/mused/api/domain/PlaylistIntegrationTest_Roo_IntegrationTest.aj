// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mused.api.domain;

import in.mused.api.domain.PlaylistDataOnDemand;
import in.mused.api.domain.PlaylistIntegrationTest;
import in.mused.api.service.PlaylistService;
import java.util.List;
import org.bson.types.ObjectId;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect PlaylistIntegrationTest_Roo_IntegrationTest {
    
    declare @type: PlaylistIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: PlaylistIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    PlaylistDataOnDemand PlaylistIntegrationTest.dod;
    
    @Autowired
    PlaylistService PlaylistIntegrationTest.playlistService;
    
    @Test
    public void PlaylistIntegrationTest.testCountAllPlaylists() {
        Assert.assertNotNull("Data on demand for 'Playlist' failed to initialize correctly", dod.getRandomPlaylist());
        long count = playlistService.countAllPlaylists();
        Assert.assertTrue("Counter for 'Playlist' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void PlaylistIntegrationTest.testFindPlaylist() {
        Playlist obj = dod.getRandomPlaylist();
        Assert.assertNotNull("Data on demand for 'Playlist' failed to initialize correctly", obj);
        ObjectId id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Playlist' failed to provide an identifier", id);
        obj = playlistService.findPlaylist(id);
        Assert.assertNotNull("Find method for 'Playlist' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Playlist' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void PlaylistIntegrationTest.testFindAllPlaylists() {
        Assert.assertNotNull("Data on demand for 'Playlist' failed to initialize correctly", dod.getRandomPlaylist());
        long count = playlistService.countAllPlaylists();
        Assert.assertTrue("Too expensive to perform a find all test for 'Playlist', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Playlist> result = playlistService.findAllPlaylists();
        Assert.assertNotNull("Find all method for 'Playlist' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Playlist' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void PlaylistIntegrationTest.testFindPlaylistEntries() {
        Assert.assertNotNull("Data on demand for 'Playlist' failed to initialize correctly", dod.getRandomPlaylist());
        long count = playlistService.countAllPlaylists();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Playlist> result = playlistService.findPlaylistEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Playlist' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Playlist' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void PlaylistIntegrationTest.testSavePlaylist() {
        Assert.assertNotNull("Data on demand for 'Playlist' failed to initialize correctly", dod.getRandomPlaylist());
        Playlist obj = dod.getNewTransientPlaylist(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Playlist' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Playlist' identifier to be null", obj.getId());
        playlistService.savePlaylist(obj);
        Assert.assertNotNull("Expected 'Playlist' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void PlaylistIntegrationTest.testDeletePlaylist() {
        Playlist obj = dod.getRandomPlaylist();
        Assert.assertNotNull("Data on demand for 'Playlist' failed to initialize correctly", obj);
        ObjectId id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Playlist' failed to provide an identifier", id);
        obj = playlistService.findPlaylist(id);
        playlistService.deletePlaylist(obj);
        Assert.assertNull("Failed to remove 'Playlist' with identifier '" + id + "'", playlistService.findPlaylist(id));
    }
    
}
