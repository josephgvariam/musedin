// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mused.api.domain;

import in.mused.api.domain.UserConnectionDataOnDemand;
import in.mused.api.domain.UserConnectionIntegrationTest;
import in.mused.api.service.UserConnectionService;
import java.util.List;
import org.bson.types.ObjectId;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect UserConnectionIntegrationTest_Roo_IntegrationTest {
    
    declare @type: UserConnectionIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: UserConnectionIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    UserConnectionDataOnDemand UserConnectionIntegrationTest.dod;
    
    @Autowired
    UserConnectionService UserConnectionIntegrationTest.userConnectionService;
    
    @Test
    public void UserConnectionIntegrationTest.testCountAllUserConnections() {
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to initialize correctly", dod.getRandomUserConnection());
        long count = userConnectionService.countAllUserConnections();
        Assert.assertTrue("Counter for 'UserConnection' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void UserConnectionIntegrationTest.testFindUserConnection() {
        UserConnection obj = dod.getRandomUserConnection();
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to initialize correctly", obj);
        ObjectId id = obj.getId();
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to provide an identifier", id);
        obj = userConnectionService.findUserConnection(id);
        Assert.assertNotNull("Find method for 'UserConnection' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'UserConnection' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void UserConnectionIntegrationTest.testFindAllUserConnections() {
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to initialize correctly", dod.getRandomUserConnection());
        long count = userConnectionService.countAllUserConnections();
        Assert.assertTrue("Too expensive to perform a find all test for 'UserConnection', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<UserConnection> result = userConnectionService.findAllUserConnections();
        Assert.assertNotNull("Find all method for 'UserConnection' illegally returned null", result);
        Assert.assertTrue("Find all method for 'UserConnection' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void UserConnectionIntegrationTest.testFindUserConnectionEntries() {
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to initialize correctly", dod.getRandomUserConnection());
        long count = userConnectionService.countAllUserConnections();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<UserConnection> result = userConnectionService.findUserConnectionEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'UserConnection' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'UserConnection' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void UserConnectionIntegrationTest.testSaveUserConnection() {
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to initialize correctly", dod.getRandomUserConnection());
        UserConnection obj = dod.getNewTransientUserConnection(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'UserConnection' identifier to be null", obj.getId());
        userConnectionService.saveUserConnection(obj);
        Assert.assertNotNull("Expected 'UserConnection' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void UserConnectionIntegrationTest.testDeleteUserConnection() {
        UserConnection obj = dod.getRandomUserConnection();
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to initialize correctly", obj);
        ObjectId id = obj.getId();
        Assert.assertNotNull("Data on demand for 'UserConnection' failed to provide an identifier", id);
        obj = userConnectionService.findUserConnection(id);
        userConnectionService.deleteUserConnection(obj);
        Assert.assertNull("Failed to remove 'UserConnection' with identifier '" + id + "'", userConnectionService.findUserConnection(id));
    }
    
}
