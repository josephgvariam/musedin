// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mused.api.domain;

import in.mused.api.domain.User;
import in.mused.api.domain.UserDataOnDemand;
import in.mused.api.service.SecurityService;
import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.bson.types.ObjectId;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect UserDataOnDemand_Roo_DataOnDemand {
    
    declare @type: UserDataOnDemand: @Component;
    
    private Random UserDataOnDemand.rnd = new SecureRandom();
    
    private List<User> UserDataOnDemand.data;
    
    @Autowired
    SecurityService UserDataOnDemand.securityService;
    
    public User UserDataOnDemand.getNewTransientUser(int index) {
        User obj = new User();
        setAccountExpired(obj, index);
        setAccountLocked(obj, index);
        setDateCreated(obj, index);
        setDisplayname(obj, index);
        setEmail(obj, index);
        setEnabled(obj, index);
        setLastUpdated(obj, index);
        setLocation(obj, index);
        setPassword(obj, index);
        setPasswordExpired(obj, index);
        setType(obj, index);
        setUsername(obj, index);
        return obj;
    }
    
    public void UserDataOnDemand.setAccountExpired(User obj, int index) {
        Boolean accountExpired = Boolean.TRUE;
        obj.setAccountExpired(accountExpired);
    }
    
    public void UserDataOnDemand.setAccountLocked(User obj, int index) {
        Boolean accountLocked = Boolean.TRUE;
        obj.setAccountLocked(accountLocked);
    }
    
    public void UserDataOnDemand.setDateCreated(User obj, int index) {
        Date dateCreated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDateCreated(dateCreated);
    }
    
    public void UserDataOnDemand.setDisplayname(User obj, int index) {
        String displayname = "displayname_" + index;
        obj.setDisplayname(displayname);
    }
    
    public void UserDataOnDemand.setEmail(User obj, int index) {
        String email = "foo" + index + "@bar.com";
        obj.setEmail(email);
    }
    
    public void UserDataOnDemand.setEnabled(User obj, int index) {
        Boolean enabled = Boolean.TRUE;
        obj.setEnabled(enabled);
    }
    
    public void UserDataOnDemand.setLastUpdated(User obj, int index) {
        Date lastUpdated = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setLastUpdated(lastUpdated);
    }
    
    public void UserDataOnDemand.setLocation(User obj, int index) {
        double[] location = { new Integer(index).doubleValue(), new Integer(index).doubleValue() };
        obj.setLocation(location);
    }
    
    public void UserDataOnDemand.setPassword(User obj, int index) {
        String password = "password_" + index;
        obj.setPassword(password);
    }
    
    public void UserDataOnDemand.setPasswordExpired(User obj, int index) {
        Boolean passwordExpired = Boolean.TRUE;
        obj.setPasswordExpired(passwordExpired);
    }
    
    public void UserDataOnDemand.setType(User obj, int index) {
        String type = "type_" + index;
        obj.setType(type);
    }
    
    public void UserDataOnDemand.setUsername(User obj, int index) {
        String username = "username_" + index;
        obj.setUsername(username);
    }
    
    public User UserDataOnDemand.getSpecificUser(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        User obj = data.get(index);
        ObjectId id = obj.getId();
        return securityService.findUser(id);
    }
    
    public User UserDataOnDemand.getRandomUser() {
        init();
        User obj = data.get(rnd.nextInt(data.size()));
        ObjectId id = obj.getId();
        return securityService.findUser(id);
    }
    
    public boolean UserDataOnDemand.modifyUser(User obj) {
        return false;
    }
    
    public void UserDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = securityService.findUserEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'User' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<User>();
        for (int i = 0; i < 10; i++) {
            User obj = getNewTransientUser(i);
            try {
                securityService.saveUser(obj);
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            data.add(obj);
        }
    }
    
}
