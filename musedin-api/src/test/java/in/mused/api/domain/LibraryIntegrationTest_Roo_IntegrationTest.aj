// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package in.mused.api.domain;

import in.mused.api.domain.LibraryDataOnDemand;
import in.mused.api.domain.LibraryIntegrationTest;
import in.mused.api.service.LibraryService;
import java.util.List;
import org.bson.types.ObjectId;
import org.junit.Assert;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.test.context.ContextConfiguration;
import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;

privileged aspect LibraryIntegrationTest_Roo_IntegrationTest {
    
    declare @type: LibraryIntegrationTest: @RunWith(SpringJUnit4ClassRunner.class);
    
    declare @type: LibraryIntegrationTest: @ContextConfiguration(locations = "classpath:/META-INF/spring/applicationContext*.xml");
    
    @Autowired
    LibraryDataOnDemand LibraryIntegrationTest.dod;
    
    @Autowired
    LibraryService LibraryIntegrationTest.libraryService;
    
    @Test
    public void LibraryIntegrationTest.testCountAllLibrarys() {
        Assert.assertNotNull("Data on demand for 'Library' failed to initialize correctly", dod.getRandomLibrary());
        long count = libraryService.countAllLibrarys();
        Assert.assertTrue("Counter for 'Library' incorrectly reported there were no entries", count > 0);
    }
    
    @Test
    public void LibraryIntegrationTest.testFindLibrary() {
        Library obj = dod.getRandomLibrary();
        Assert.assertNotNull("Data on demand for 'Library' failed to initialize correctly", obj);
        ObjectId id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Library' failed to provide an identifier", id);
        obj = libraryService.findLibrary(id);
        Assert.assertNotNull("Find method for 'Library' illegally returned null for id '" + id + "'", obj);
        Assert.assertEquals("Find method for 'Library' returned the incorrect identifier", id, obj.getId());
    }
    
    @Test
    public void LibraryIntegrationTest.testFindAllLibrarys() {
        Assert.assertNotNull("Data on demand for 'Library' failed to initialize correctly", dod.getRandomLibrary());
        long count = libraryService.countAllLibrarys();
        Assert.assertTrue("Too expensive to perform a find all test for 'Library', as there are " + count + " entries; set the findAllMaximum to exceed this value or set findAll=false on the integration test annotation to disable the test", count < 250);
        List<Library> result = libraryService.findAllLibrarys();
        Assert.assertNotNull("Find all method for 'Library' illegally returned null", result);
        Assert.assertTrue("Find all method for 'Library' failed to return any data", result.size() > 0);
    }
    
    @Test
    public void LibraryIntegrationTest.testFindLibraryEntries() {
        Assert.assertNotNull("Data on demand for 'Library' failed to initialize correctly", dod.getRandomLibrary());
        long count = libraryService.countAllLibrarys();
        if (count > 20) count = 20;
        int firstResult = 0;
        int maxResults = (int) count;
        List<Library> result = libraryService.findLibraryEntries(firstResult, maxResults);
        Assert.assertNotNull("Find entries method for 'Library' illegally returned null", result);
        Assert.assertEquals("Find entries method for 'Library' returned an incorrect number of entries", count, result.size());
    }
    
    @Test
    public void LibraryIntegrationTest.testSaveLibrary() {
        Assert.assertNotNull("Data on demand for 'Library' failed to initialize correctly", dod.getRandomLibrary());
        Library obj = dod.getNewTransientLibrary(Integer.MAX_VALUE);
        Assert.assertNotNull("Data on demand for 'Library' failed to provide a new transient entity", obj);
        Assert.assertNull("Expected 'Library' identifier to be null", obj.getId());
        libraryService.saveLibrary(obj);
        Assert.assertNotNull("Expected 'Library' identifier to no longer be null", obj.getId());
    }
    
    @Test
    public void LibraryIntegrationTest.testDeleteLibrary() {
        Library obj = dod.getRandomLibrary();
        Assert.assertNotNull("Data on demand for 'Library' failed to initialize correctly", obj);
        ObjectId id = obj.getId();
        Assert.assertNotNull("Data on demand for 'Library' failed to provide an identifier", id);
        obj = libraryService.findLibrary(id);
        libraryService.deleteLibrary(obj);
        Assert.assertNull("Failed to remove 'Library' with identifier '" + id + "'", libraryService.findLibrary(id));
    }
    
}
